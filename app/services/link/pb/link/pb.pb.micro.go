// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pb/link/pb.proto

package link

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LinkDomainService service

type LinkDomainService interface {
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...client.CallOption) (*CreateLinkResponse, error)
	DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...client.CallOption) (*DeleteLinkResponse, error)
	FindLinks(ctx context.Context, in *FindLinksRequest, opts ...client.CallOption) (*FindLinksResponse, error)
}

type linkDomainService struct {
	c    client.Client
	name string
}

func NewLinkDomainService(name string, c client.Client) LinkDomainService {
	return &linkDomainService{
		c:    c,
		name: name,
	}
}

func (c *linkDomainService) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...client.CallOption) (*CreateLinkResponse, error) {
	req := c.c.NewRequest(c.name, "LinkDomainService.CreateLink", in)
	out := new(CreateLinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkDomainService) DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...client.CallOption) (*DeleteLinkResponse, error) {
	req := c.c.NewRequest(c.name, "LinkDomainService.DeleteLink", in)
	out := new(DeleteLinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkDomainService) FindLinks(ctx context.Context, in *FindLinksRequest, opts ...client.CallOption) (*FindLinksResponse, error) {
	req := c.c.NewRequest(c.name, "LinkDomainService.FindLinks", in)
	out := new(FindLinksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LinkDomainService service

type LinkDomainServiceHandler interface {
	CreateLink(context.Context, *CreateLinkRequest, *CreateLinkResponse) error
	DeleteLink(context.Context, *DeleteLinkRequest, *DeleteLinkResponse) error
	FindLinks(context.Context, *FindLinksRequest, *FindLinksResponse) error
}

func RegisterLinkDomainServiceHandler(s server.Server, hdlr LinkDomainServiceHandler, opts ...server.HandlerOption) error {
	type linkDomainService interface {
		CreateLink(ctx context.Context, in *CreateLinkRequest, out *CreateLinkResponse) error
		DeleteLink(ctx context.Context, in *DeleteLinkRequest, out *DeleteLinkResponse) error
		FindLinks(ctx context.Context, in *FindLinksRequest, out *FindLinksResponse) error
	}
	type LinkDomainService struct {
		linkDomainService
	}
	h := &linkDomainServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LinkDomainService{h}, opts...))
}

type linkDomainServiceHandler struct {
	LinkDomainServiceHandler
}

func (h *linkDomainServiceHandler) CreateLink(ctx context.Context, in *CreateLinkRequest, out *CreateLinkResponse) error {
	return h.LinkDomainServiceHandler.CreateLink(ctx, in, out)
}

func (h *linkDomainServiceHandler) DeleteLink(ctx context.Context, in *DeleteLinkRequest, out *DeleteLinkResponse) error {
	return h.LinkDomainServiceHandler.DeleteLink(ctx, in, out)
}

func (h *linkDomainServiceHandler) FindLinks(ctx context.Context, in *FindLinksRequest, out *FindLinksResponse) error {
	return h.LinkDomainServiceHandler.FindLinks(ctx, in, out)
}
