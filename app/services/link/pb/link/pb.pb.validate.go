// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/link/pb.proto

package link

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _pb_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateLinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateLinkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLink() == nil {
		return CreateLinkRequestValidationError{
			field:  "Link",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLinkRequestValidationError{
				field:  "Link",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateLinkRequestValidationError is the validation error returned by
// CreateLinkRequest.Validate if the designated constraints aren't met.
type CreateLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLinkRequestValidationError) ErrorName() string {
	return "CreateLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLinkRequestValidationError{}

// Validate checks the field values on CreateLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLinkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLinkResponseValidationError{
				field:  "Link",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateLinkResponseValidationError is the validation error returned by
// CreateLinkResponse.Validate if the designated constraints aren't met.
type CreateLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLinkResponseValidationError) ErrorName() string {
	return "CreateLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLinkResponseValidationError{}

// Validate checks the field values on DeleteLinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteLinkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetLinkID()) < 1 {
		return DeleteLinkRequestValidationError{
			field:  "LinkID",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		return DeleteLinkRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteLinkRequestValidationError is the validation error returned by
// DeleteLinkRequest.Validate if the designated constraints aren't met.
type DeleteLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLinkRequestValidationError) ErrorName() string {
	return "DeleteLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLinkRequestValidationError{}

// Validate checks the field values on DeleteLinkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLinkResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteLinkResponseValidationError is the validation error returned by
// DeleteLinkResponse.Validate if the designated constraints aren't met.
type DeleteLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLinkResponseValidationError) ErrorName() string {
	return "DeleteLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLinkResponseValidationError{}

// Validate checks the field values on FindLinksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FindLinksRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		return FindLinksRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// FindLinksRequestValidationError is the validation error returned by
// FindLinksRequest.Validate if the designated constraints aren't met.
type FindLinksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindLinksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindLinksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindLinksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindLinksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindLinksRequestValidationError) ErrorName() string { return "FindLinksRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindLinksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindLinksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindLinksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindLinksRequestValidationError{}

// Validate checks the field values on FindLinksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FindLinksResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindLinksResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalLinksNumber

	return nil
}

// FindLinksResponseValidationError is the validation error returned by
// FindLinksResponse.Validate if the designated constraints aren't met.
type FindLinksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindLinksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindLinksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindLinksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindLinksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindLinksResponseValidationError) ErrorName() string {
	return "FindLinksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindLinksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindLinksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindLinksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindLinksResponseValidationError{}

// Validate checks the field values on LinkEntity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LinkEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for LinkID

	// no validation rules for UserID

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return LinkEntityValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		return LinkEntityValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// LinkEntityValidationError is the validation error returned by
// LinkEntity.Validate if the designated constraints aren't met.
type LinkEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkEntityValidationError) ErrorName() string { return "LinkEntityValidationError" }

// Error satisfies the builtin error interface
func (e LinkEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkEntityValidationError{}
